From 1601649c8489977d92910e1b9f775186918a3a42 Mon Sep 17 00:00:00 2001
From: Jeroen Hofstee <jhofstee@victronenergy.com>
Date: Mon, 10 Oct 2022 14:54:43 +0200
Subject: [PATCH] Add support for arg0namespace in add_signal_receiver

Match messages whose first argument is a string and start with the
value given to arg0namespace. This is primarily intended for watching
name owner changes for a group of related bus names, rather than for
a single name or all name changes.

Signed-off-by: Jeroen Hofstee <jhofstee@victronenergy.com>
---
 dbus/connection.py | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/dbus/connection.py b/dbus/connection.py
index f5c8dd9..e4a8486 100644
--- a/dbus/connection.py
+++ b/dbus/connection.py
@@ -58,7 +58,9 @@ class SignalMatch(object):
               '_byte_arrays', '_conn_weakref',
               '_destination_keyword', '_interface_keyword',
               '_message_keyword', '_member_keyword',
-              '_sender_keyword', '_path_keyword', '_int_args_match']
+              '_sender_keyword', '_path_keyword', '_int_args_match',
+              '_arg0namespace'
+              ]
     if is_py2:
         _slots.append('_utf8_strings')
 
@@ -69,7 +71,7 @@ class SignalMatch(object):
                  sender_keyword=None, path_keyword=None,
                  interface_keyword=None, member_keyword=None,
                  message_keyword=None, destination_keyword=None,
-                 **kwargs):
+                 arg0namespace=None, **kwargs):
         if member is not None:
             validate_member_name(member)
         if dbus_interface is not None:
@@ -85,6 +87,7 @@ class SignalMatch(object):
         self._interface = dbus_interface
         self._member = member
         self._path = object_path
+        self._arg0namespace = arg0namespace
         self._handler = handler
 
         # if the connection is actually a bus, it's responsible for changing
@@ -148,6 +151,8 @@ class SignalMatch(object):
                 rule.append("interface='%s'" % self._interface)
             if self._member is not None:
                 rule.append("member='%s'" % self._member)
+            if self._arg0namespace is not None:
+                rule.append("arg0namespace='%s'" % self._arg0namespace)
             if self._int_args_match is not None:
                 for index, value in self._int_args_match.items():
                     rule.append("arg%d='%s'" % (index, value))
@@ -197,6 +202,12 @@ class SignalMatch(object):
                     or not isinstance(args[index], arg_type)
                     or args[index] != value):
                     return False
+        if self._arg0namespace is not None:
+            kwargs = dict(byte_arrays=True)
+            args = message.get_args_list(**kwargs)
+            if len(args) == 0 or not isinstance(args[0], String) \
+                or not args[0].startswith(self._arg0namespace):
+                return False
 
         # these have likely already been checked by the match tree
         if self._member not in (None, message.get_member()):
@@ -396,6 +407,9 @@ class Connection(_Connection):
                 is the value given for that keyword parameter. As of this
                 time only string arguments can be matched (in particular,
                 object paths and signatures can't).
+            `arg0namespace` : str
+                If not None (the default) match only signals where the first
+                argument begins with the value of the keyword parameter.
             `named_service` : str
                 A deprecated alias for `bus_name`.
         """
-- 
2.25.1

